
C:\Users\Taylor\Atollic\TrueSTUDIO\ARM_workspace_7.1\grblSTM32F0\Debug\grblSTM32F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000019c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800025c  08000264  00010264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800025c  0800025c  0001025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000260  08000260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000264  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000001c  08000264  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010264  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000368  00000000  00000000  0001028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000162  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000070  00000000  00000000  00010758  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000107c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000346  00000000  00000000  00010810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000246  00000000  00000000  00010b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00010d9c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000a8  00000000  00000000  00010e1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000244 	.word	0x08000244

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000244 	.word	0x08000244

08000108 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
  uint32_t i = 0;
 800010e:	2300      	movs	r3, #0
 8000110:	607b      	str	r3, [r7, #4]
  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
  {
	i++;
 8000112:	687b      	ldr	r3, [r7, #4]
 8000114:	3301      	adds	r3, #1
 8000116:	607b      	str	r3, [r7, #4]
  }
 8000118:	e7fb      	b.n	8000112 <main+0xa>
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800011c:	480d      	ldr	r0, [pc, #52]	; (8000154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800011e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000120:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000122:	e003      	b.n	800012c <LoopCopyDataInit>

08000124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000124:	4b0c      	ldr	r3, [pc, #48]	; (8000158 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800012a:	3104      	adds	r1, #4

0800012c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800012c:	480b      	ldr	r0, [pc, #44]	; (800015c <LoopForever+0xa>)
  ldr r3, =_edata
 800012e:	4b0c      	ldr	r3, [pc, #48]	; (8000160 <LoopForever+0xe>)
  adds r2, r0, r1
 8000130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000134:	d3f6      	bcc.n	8000124 <CopyDataInit>
  ldr r2, =_sbss
 8000136:	4a0b      	ldr	r2, [pc, #44]	; (8000164 <LoopForever+0x12>)
  b LoopFillZerobss
 8000138:	e002      	b.n	8000140 <LoopFillZerobss>

0800013a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800013a:	2300      	movs	r3, #0
  str  r3, [r2]
 800013c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800013e:	3204      	adds	r2, #4

08000140 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000140:	4b09      	ldr	r3, [pc, #36]	; (8000168 <LoopForever+0x16>)
  cmp r2, r3
 8000142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000144:	d3f9      	bcc.n	800013a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000146:	f000 f813 	bl	8000170 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800014a:	f000 f855 	bl	80001f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800014e:	f7ff ffdb 	bl	8000108 <main>

08000152 <LoopForever>:

LoopForever:
    b LoopForever
 8000152:	e7fe      	b.n	8000152 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000154:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000158:	08000264 	.word	0x08000264
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800015c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000160:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000164:	20000000 	.word	0x20000000
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8000168:	2000001c 	.word	0x2000001c

0800016c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800016c:	e7fe      	b.n	800016c <ADC1_COMP_IRQHandler>
	...

08000170 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000174:	4b1a      	ldr	r3, [pc, #104]	; (80001e0 <SystemInit+0x70>)
 8000176:	4a1a      	ldr	r2, [pc, #104]	; (80001e0 <SystemInit+0x70>)
 8000178:	6812      	ldr	r2, [r2, #0]
 800017a:	2101      	movs	r1, #1
 800017c:	430a      	orrs	r2, r1
 800017e:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <SystemInit+0x70>)
 8000182:	4a17      	ldr	r2, [pc, #92]	; (80001e0 <SystemInit+0x70>)
 8000184:	6852      	ldr	r2, [r2, #4]
 8000186:	4917      	ldr	r1, [pc, #92]	; (80001e4 <SystemInit+0x74>)
 8000188:	400a      	ands	r2, r1
 800018a:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <SystemInit+0x70>)
 800018e:	4a14      	ldr	r2, [pc, #80]	; (80001e0 <SystemInit+0x70>)
 8000190:	6812      	ldr	r2, [r2, #0]
 8000192:	4915      	ldr	r1, [pc, #84]	; (80001e8 <SystemInit+0x78>)
 8000194:	400a      	ands	r2, r1
 8000196:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000198:	4b11      	ldr	r3, [pc, #68]	; (80001e0 <SystemInit+0x70>)
 800019a:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <SystemInit+0x70>)
 800019c:	6812      	ldr	r2, [r2, #0]
 800019e:	4913      	ldr	r1, [pc, #76]	; (80001ec <SystemInit+0x7c>)
 80001a0:	400a      	ands	r2, r1
 80001a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <SystemInit+0x70>)
 80001a6:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <SystemInit+0x70>)
 80001a8:	6852      	ldr	r2, [r2, #4]
 80001aa:	4911      	ldr	r1, [pc, #68]	; (80001f0 <SystemInit+0x80>)
 80001ac:	400a      	ands	r2, r1
 80001ae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <SystemInit+0x70>)
 80001b2:	4a0b      	ldr	r2, [pc, #44]	; (80001e0 <SystemInit+0x70>)
 80001b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80001b6:	210f      	movs	r1, #15
 80001b8:	438a      	bics	r2, r1
 80001ba:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <SystemInit+0x70>)
 80001be:	4a08      	ldr	r2, [pc, #32]	; (80001e0 <SystemInit+0x70>)
 80001c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80001c2:	490c      	ldr	r1, [pc, #48]	; (80001f4 <SystemInit+0x84>)
 80001c4:	400a      	ands	r2, r1
 80001c6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SystemInit+0x70>)
 80001ca:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <SystemInit+0x70>)
 80001cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80001ce:	2101      	movs	r1, #1
 80001d0:	438a      	bics	r2, r1
 80001d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80001d4:	4b02      	ldr	r3, [pc, #8]	; (80001e0 <SystemInit+0x70>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	609a      	str	r2, [r3, #8]

}
 80001da:	46c0      	nop			; (mov r8, r8)
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40021000 	.word	0x40021000
 80001e4:	f8ffb80c 	.word	0xf8ffb80c
 80001e8:	fef6ffff 	.word	0xfef6ffff
 80001ec:	fffbffff 	.word	0xfffbffff
 80001f0:	ffc0ffff 	.word	0xffc0ffff
 80001f4:	fffffeac 	.word	0xfffffeac

080001f8 <__libc_init_array>:
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <__libc_init_array+0x3c>)
 80001fa:	b570      	push	{r4, r5, r6, lr}
 80001fc:	2500      	movs	r5, #0
 80001fe:	001e      	movs	r6, r3
 8000200:	4c0d      	ldr	r4, [pc, #52]	; (8000238 <__libc_init_array+0x40>)
 8000202:	1ae4      	subs	r4, r4, r3
 8000204:	10a4      	asrs	r4, r4, #2
 8000206:	42a5      	cmp	r5, r4
 8000208:	d004      	beq.n	8000214 <__libc_init_array+0x1c>
 800020a:	00ab      	lsls	r3, r5, #2
 800020c:	58f3      	ldr	r3, [r6, r3]
 800020e:	4798      	blx	r3
 8000210:	3501      	adds	r5, #1
 8000212:	e7f8      	b.n	8000206 <__libc_init_array+0xe>
 8000214:	f000 f816 	bl	8000244 <_init>
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <__libc_init_array+0x44>)
 800021a:	2500      	movs	r5, #0
 800021c:	001e      	movs	r6, r3
 800021e:	4c08      	ldr	r4, [pc, #32]	; (8000240 <__libc_init_array+0x48>)
 8000220:	1ae4      	subs	r4, r4, r3
 8000222:	10a4      	asrs	r4, r4, #2
 8000224:	42a5      	cmp	r5, r4
 8000226:	d004      	beq.n	8000232 <__libc_init_array+0x3a>
 8000228:	00ab      	lsls	r3, r5, #2
 800022a:	58f3      	ldr	r3, [r6, r3]
 800022c:	4798      	blx	r3
 800022e:	3501      	adds	r5, #1
 8000230:	e7f8      	b.n	8000224 <__libc_init_array+0x2c>
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	0800025c 	.word	0x0800025c
 8000238:	0800025c 	.word	0x0800025c
 800023c:	0800025c 	.word	0x0800025c
 8000240:	08000260 	.word	0x08000260

08000244 <_init>:
 8000244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800024a:	bc08      	pop	{r3}
 800024c:	469e      	mov	lr, r3
 800024e:	4770      	bx	lr

08000250 <_fini>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000256:	bc08      	pop	{r3}
 8000258:	469e      	mov	lr, r3
 800025a:	4770      	bx	lr
